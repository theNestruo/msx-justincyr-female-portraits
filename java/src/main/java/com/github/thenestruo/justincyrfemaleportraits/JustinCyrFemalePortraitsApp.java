package com.github.thenestruo.justincyrfemaleportraits;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Options;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;

/**
 * Command line application that processes CLRTBL output data generated by PNG2MSX from the
 * "1008 32x32 female portrait studies done in the MSX palette" image (scaled to 400%x100%) by Justin Cyr,
 * to make the data suitable for SCREEN 3
 */
public class JustinCyrFemalePortraitsApp {

	/** Size of the original image, in girl count */
	private static final int INPUT_ROWS = 24;

	/** Size of the original image, in girl count */
	private static final int INPUT_COLS = 42;

	/** Size of a row of characters, in bytes (128) */
	private static final int CHAR_ROW_SIZE = (32 / 2) *8;

	/** Size of a girl, in bytes (512) */
	private static final int GIRL_SIZE = CHAR_ROW_SIZE * 4;

	/** Size of the output files, in girl count, to make them 8KB */
	private static final int OUTPUT_GROUP = (8 * 1024) / GIRL_SIZE;

	public static void main(String[] args) throws Exception {

		final CommandLine command = new DefaultParser().parse(new Options(), args);
		final String inputFilename = command.getArgList().remove(0);

		new JustinCyrFemalePortraitsApp(inputFilename).process();
	}

	//

	/** The input filename */
	private final String inputFilename;

	/** The path of the input file */
	private final String inputPath;

	/** An output stream to the current output file */
	private OutputStream os = null;

	/** The index of the current output file */
	private int outputIndex = 0;

	/** The amount of data written to the current output file, in girl count */
	private int outputCount = 0;

	public JustinCyrFemalePortraitsApp(final String inputFilename) {
		super();

		this.inputFilename = inputFilename;
		this.inputPath = FilenameUtils.getPath(inputFilename);
	}

	public void process() throws IOException {

		// Reads the CLRTBL for the input file, making it suitable for SCREEN 3
		try (final InputStream is = IOUtils.buffer(
				new ClrtblToScreen3InputStream(new FileInputStream(this.inputFilename)))) {

			// For every row of girls
			for (int inputRow = 0; inputRow < INPUT_ROWS; inputRow++) {

				// Reads the row
				final byte[] inputGirlRow = new byte[INPUT_COLS * GIRL_SIZE];
				IOUtils.read(is, inputGirlRow);

				// For every girl in the row
				for (int inputCol = 0; inputCol < INPUT_COLS; inputCol++) {
					final int colOffset = inputCol * CHAR_ROW_SIZE;

					// For every row of characters
					for (int y = 0; y < 32; y += 8) {
						final int yOffset = (y / 8) * CHAR_ROW_SIZE * INPUT_COLS;
						final int offset = yOffset + colOffset;

						// Writes the row to the output file
						this.getOrCreateOutputStream().write(inputGirlRow, offset, CHAR_ROW_SIZE);
					}
					this.outputCount++;
				}
			}

		} finally {
			IOUtils.closeQuietly(this.os);
			this.outputCount = 0;
		}
	}

	private OutputStream getOrCreateOutputStream() throws IOException {

		if ((this.os != null) && (this.outputCount < OUTPUT_GROUP)) {
			return this.os;
		}

		IOUtils.closeQuietly(this.os);
		final String outputFilename = FilenameUtils.concat(inputPath, String.format("%02d.clr", outputIndex));
		this.os = IOUtils.buffer(new FileOutputStream(outputFilename));
		this.outputIndex++;
		this.outputCount = 0;

		return this.os;
	}

	//

	/**
	 * An InputStream decorator that processes CLRTBL output data generated by PNG2MSX
	 * to make the data suitable for SCREEN 3.
	 * Namely: fills 0s with the color of the other nibble.
	 */
	private static class ClrtblToScreen3InputStream extends FilterInputStream {

		protected ClrtblToScreen3InputStream(InputStream in) {
			super(in);
		}

		@Override
		public int read() throws IOException {
			int c = super.read();
			if (c == -1) {
				return c;
			}

			if (c == 0x00) {
				return c;
			}

			if ((c & 0x0f) == 0x00) {
				// Propagate high nibble to low nibble
				return (c & 0xf0) | ((c >> 4) & 0x0f);
			}
			if ((c & 0xf0) == 0x00) {
				// Propagate low nibble to high nibble
				return (c & 0x0f) | ((c >> 4) & 0xf0);
			}
			return c;
		}

		@Override
		public int read(byte[] b, int off, int len) throws IOException {
			int ret = super.read(b, off, len);
			if (ret == -1) {
				return ret;
			}

			for (int i = off, n = off + ret; i < n; i++) {
				byte c = b[i];
				if (c == 0x00) {
					continue;
				}

				if ((c & 0x0f) == 0x00) {
					// Propagate high nibble to low nibble
					b[i] = (byte) ((c & 0xf0) | ((c >> 4) & 0x0f));
					continue;
				}
				if ((c & 0xf0) == 0x00) {
					// Propagate low nibble to high nibble
					b[i] = (byte) ((c & 0x0f) | ((c >> 4) & 0xf0));
					continue;
				}
			}

			return ret;
		}
	}
}
